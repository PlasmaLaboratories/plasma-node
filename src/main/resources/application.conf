bifrost {

  restApi {
    # Local network address to bind to
    bindAddress: "127.0.0.1:9085"

    # Hash of the API key string
    #apiKeyHash: ""

    # Enable cors support
    corsAllowed: true

    # Time allowed to process a request
    timeout: 10s
  }

  network {

    #####################################################
    # Node information to be declared during handshake  #
    #####################################################

    # Node name to send during handshake
    nodeName = "Bifrost"

    # Network version send in handshake
    appVersion = 1.0.0

    # Network agent name. May contain information about client code
    # stack, starting from core code-base up to the end graphical interface.
    # Basic format is `/Name:Version(comments)/Name:Version/.../`,
    # e.g. `/Ergo-Scala-client:2.0.0(iPad; U; CPU OS 3_2_1)/AndroidBuild:0.8/`
    agentName = "/bifrost-client:1.0.0/"

    # Network address
    bindAddress = "0.0.0.0:9084"

    ########################
    # Connection settings  #
    ########################

    # Magic bytes, that will be added to every p2p message to allow
    # distinguish different networks (e.g. testnet/mainnet).
    magicBytes = [12, 34, 56, 78]

    # String with IP address and port to send as external address during handshake.
    # Could be set automatically if UPnP is enabled.
    #
    # If `declared-address` is set, which is the common scenario for nodes running in the cloud,
    # the node will just listen to incoming connections on `bindAddress:port` and
    # broadcast its `declaredAddress` to its peers.
    # UPnP is supposed to be disabled in this scenario.
    #
    # If declared address is not set and UPnP is not enabled, the node will not listen to incoming connections at all.
    #
    # If declared address is not set and UPnP is enabled, the node will attempt to connect to an IGD, retrieve its
    # external IP address and configure the gateway to allow traffic through. If the node succeeds, the IGD's external
    # IP address becomes the node's declared address.
    #
    # In some cases, you may both set `decalredAddress` and enable UPnP (e.g. when IGD can't reliably determine its
    # external IP address). In such cases the node will attempt to configure an IGD to pass traffic from external port
    # to `bind-address:port`. Please note, however, that this setup is not recommended.
    # declaredAddress = ""

    # Enable UPnP tunnel creation only if you router/gateway supports it. Useful if your node is runnin in home
    # network. Completely useless if you node is in cloud.
    upnpEnabled = no

    # Accept only local connections
    localOnly = false

    # UPnP timeouts
    # upnp-gateway-timeout = 7s
    # upnp-discover-timeout = 3s

    # Add delay for sending message
    # addedMaxDelay = 0ms

    ##################
    # Peers settings #
    ##################

    # Network handshake timeout
    handshakeTimeout = 30s

    # List of IP addresses of well known nodes.
    knownPeers = []

    # Interval between GetPeers messages to be send by our node to a random one
    getPeersInterval = 2m

    # Number of network connections
    maxConnections = 20

    # Network connection timeout
    connectionTimeout = 1s

    ############################
    # Delivery settings limits #
    ############################

    # Network delivery timeout
    deliveryTimeout = 10s

    # Max number of delivery checks. Stop expecting modifier (and penalize peer) if it was not delivered on time
    maxDeliveryChecks = 40

    ############
    # Timeouts #
    ############

    # Interval between `SyncInfo` messages when our node is not synchronized yet
    syncInterval = 10s

    # Interval between `SyncInfo` messages when our node is already synchronized
    syncIntervalStable = 20s

    # Synchronization timeout
    syncTimeout = 5s

    # Synchronization status update interval
    syncStatusRefresh = 2m

    # Synchronization status update interval for stable regime
    syncStatusRefreshStable = 4m

    # Network controller timeout
    controllerTimeout = 5s

    ###############
    # Size limits #
    ###############

    # Maximum income package size
    maxPacketSize = 1048576

    # Maximum size of a handshaking message
    maxHandshakeSize = 8096

    # Accept maximum inv objects
    maxInvObjects = 512

    # Desired number of inv objects. Our requests will have this size.
    desiredInvObjects = 512

    # How many persistent modifiers to store in the cache.
    # The cache stores modifiers that are waiting to be applied.
    maxModifiersCacheSize = 1024

    # Maximum number of PeerSpec objects in one Peers message
    maxPeerSpecObjects = 64

    # Default ban duration, unless permanent penalty is applied
    temporalBanDuration = 60m

    # Misbehaving peer penalty score will not be increased withing this time interval,
    # unless permanent penalty is applied
    penaltySafeInterval = 5m

    # Max penalty score peer can accumulate before being banned
    penaltyScoreThreshold = 100
  }

  forgingSettings {
    # Difficulty the genesis block is created with
    InitialDifficulty: 15000000

    # Smallest difficulty threshold to increase the difficulty score by
    MinimumDifficulty: 100

    # Enable/disable forging on this node
    tryForging: true

    # Agreed upon block time target
    targetBlockTime: 6000

    # Delay between trying to forge the next block
    blockGenerationDelay: 2000

    # Major network version
    version: 3

    # Height of the last fork
    forkHeight: 0
  }

  ntp {
    # NTP server address
    server = "pool.ntp.org"

    # update time rate
    updateEvery = 30m

    # server answer timeout
    timeout = 30s
  }

  p2p {
    name = "local-testnet",
    myAddress = "",
    upnp = false,
    upnpGatewayTimeout = 7000,
    upnpDiscoverTimeout = 3000,
    connectionTimeout = 60,
    handshakeTimeout = 5000,
    addedMaxDelay = 2000,
    maxConnections = 10,
    networkChunkSize = 100,
    localOnly = true,
    port = 9084,
    knownPeers = []
  }

  walletSeed = "genesisoo",
  keyFileDir = "keyfiles/private-testnet",
  walletDir = "/tmp/bifrost/private-testnet/wallet",
  dataDir = "/tmp/bifrost/private-testnet/blockchain",
  pbrDir = "/tmp/bifrost/private-testnet/pbr",
  tbrDir = "/tmp/bifrost/private-testnet/tbr",
  logDir = "/tmp/bifrost/private-testnet/log",
  rpcPort = 9085,
  maxRollback = 100,
  targetBlockTime = 6000,
  tryForging = true,
  blockGenerationDelay = 2000,
  cors = true,
  verboseAPI = true,
  version = [3,0,0],
  forkHeight = 0
}

app {
  modifierIdSize = 32
  applicationNameLimit = 50
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = on
  actor {
    debug {
          receive = on
          autoreceive = on
          unhandled = on
          lifecycle = on
          event-stream = on
        }
    # default-dispatcher {
    #   type = Dispatcher
    #   executor = "thread-pool-executor"
    #   thread-pool-executor {
    #     keep-alive-time = 60s
    #     fixed-pool-size = 64

    #     core-pool-size-min = 16
    #     core-pool-size-factor = 1.0
    #     core-pool-size-max = 64

    #     max-pool-size-min = 16
    #     max-pool-size-factor = 1.0
    #     max-pool-size-max = 64
    #   }
    # }
  }
}

# Settings for cache (Guava)
cache {
  # Consider 5 sec per block for testing and 15 sec per block for toplnet
  # 15 sec * 50 blocks / 60 sec per minutes = 12.5 minutes
  # using milliseconds: 1,200,000 milliseconds == 20 minutes
  expireTime = 1200000
  cacheSize = 50000
}

# Visual mailbox tool
# akka.actor.default-mailbox {
#     mailbox-type = "de.aktey.akka.visualmailbox.VisualMailboxType"
# }
# # destination for mailbox counting
# de.aktey.akka.visualmailbox {
#   server {
#     address {
#       host = "localhost"
#       port = 60009
#     }
#   }
# }

# Service to monitor performance
kamon {

  # Enable/disable monitoring
  enable = false

  environment.service = "bifrost"
  # apm.api-key = ""

  trace.join-remote-parents-with-same-span-id = yes
  metric.tick-interval = 60 seconds

  influxdb {
    hostname = "localhost"
    port = 8086
    database = "mydb"
    subscriptions {
      akka-actor = ["**"]
      akka-dispatcher = ["**"]
    }
  }

  zipkin {
    hostname = "localhost"
    port = 9411
    protocol = "http"
  }

  instrumentation {
    akka.filters {
      doomsday-wildcard = on
      actors {
        track {
          includes = ["**"]
          excludes = []
        }
        start-trace {
          includes = ["**"]
        }
        trace {
          includes = ["**"]
        }
      }
      dispatchers {
        includes = ["**"]
      }
    }

    akka.http {
      server {
        propagation {
          enabled = yes
          channel = default
        }
        tracing {
          enabled = yes
          span-metrics = on
        }
      }
      client {
        propagation {
          enabled = yes
          channel = default
        }
        tracing {
          enabled = yes
          span-metrics = on
        }
      }
    }
  }
}