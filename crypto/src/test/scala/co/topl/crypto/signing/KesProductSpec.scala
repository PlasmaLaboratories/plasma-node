package co.topl.crypto.signing

import co.topl.crypto.utils.Hex.implicits._
import co.topl.crypto.utils.Generators.{genBytesWithBoundedSize, genRandomlySizedBytes}
import co.topl.models.{Bytes, Proofs, VerificationKeys}
import org.scalacheck.Gen
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import org.scalatestplus.scalacheck.{ScalaCheckDrivenPropertyChecks, ScalaCheckPropertyChecks}

class KesProductSpec
    extends AnyFlatSpec
    with ScalaCheckPropertyChecks
    with ScalaCheckDrivenPropertyChecks
    with Matchers {

  "KesProduct" should "verify a message signed with the appropriate public key" in {
    forAll(
      genRandomlySizedBytes,
      genRandomlySizedBytes,
      genRandomlySizedBytes,
      genRandomlySizedBytes,
      Gen.choose(1, 12),
      Gen.choose(1, 12)
    ) { (seed1: Bytes, seed2: Bytes, message1: Bytes, message2: Bytes, supHeight: Int, subHeight: Int) =>
      whenever(!(seed1 == seed2) && !(message1 == message2)) {
        val kesProduct = new KesProduct
        val (sk1, vk1) = kesProduct.createKeyPair(seed1, (supHeight, subHeight), 0)
        val (_, vk2) = kesProduct.createKeyPair(seed2, (supHeight, subHeight), 0)
        val sig = kesProduct.sign(sk1, message1)

        kesProduct.verify(sig, message1, vk1) shouldBe true
        kesProduct.verify(sig, message1, vk2) shouldBe false
        kesProduct.verify(sig, message2, vk1) shouldBe false
      }
    }
  }
  it should "generate identical keypairs given the same seed" in {
    forAll(genBytesWithBoundedSize(1, 1024), Gen.choose(1, 12), Gen.choose(1, 12)) {
      (seedBytes: Bytes, supHeight: Int, subHeight: Int) =>
        val kesProduct = new KesProduct
        val (_, vk1) = kesProduct.createKeyPair(seedBytes, (supHeight, subHeight), 0)
        val (_, vk2) = kesProduct.createKeyPair(seedBytes, (supHeight, subHeight), 0)

        vk1 shouldBe vk2
    }
  }
//  it should "test vector - 1 - Generate and verify a specified signature at `t=0`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (5, 9)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 2 - Generate and verify a specified signature at `t=100`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (5, 9)
//    val specIn_time = 100
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk0, _) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sk = kesProduct.update(sk0, specIn_time)
//    val vk = kesProduct.getVerificationKey(sk)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 3 - Generate and verify a specified signature at `t=1000`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (5, 9)
//    val specIn_time = 1000
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk0, _) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sk = kesProduct.update(sk0, specIn_time)
//    val vk = kesProduct.getVerificationKey(sk)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 4 - Generate and verify a specified signature at `t=10000`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (5, 9)
//    val specIn_time = 10000
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk0, _) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sk = kesProduct.update(sk0, specIn_time)
//    val vk = kesProduct.getVerificationKey(sk)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 5 - Generate and verify a specified signature at `t=0`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 6 - Generate and verify a specified signature at `t=1`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 1
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk0, _) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sk = kesProduct.update(sk0, specIn_time)
//    val vk = kesProduct.getVerificationKey(sk)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 7 - Generate and verify a specified signature at `t=2`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 2
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 8 - Generate and verify a specified signature at `t=3`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 9 - Generate and verify a specified signature at `t=4`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 10 - Generate and verify a specified signature at `t=5`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 11 - Generate and verify a specified signature at `t=6`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 12 - Generate and verify a specified signature at `t=7`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 13 - Generate and verify a specified signature at `t=8`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 14 - Generate and verify a specified signature at `t=9`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 15 - Generate and verify a specified signature at `t=10`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 16 - Generate and verify a specified signature at `t=11`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 17 - Generate and verify a specified signature at `t=12`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 18 - Generate and verify a specified signature at `t=13`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 19 - Generate and verify a specified signature at `t=14`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }
//  it should "test vector - 20 - Generate and verify a specified signature at `t=15`" in {
//    val kesProduct = new KesProduct()
//    val specIn_seed = "0000000000000000000000000000000000000000000000000000000000000000".hexStringToBytes
//    val specIn_height = (2, 2)
//    val specIn_time = 0
//    val specIn_msg = "6d657373616765".hexStringToBytes
//
//    val specOut_vk = VerificationKeys.KesProduct(
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//      specIn_time
//    )
//    val specOut_sig = Proofs.Signature.KesProduct(
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      Proofs.Signature.KesSum(
//        VerificationKeys.Ed25519("0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes),
//        Proofs.Signature.Ed25519(
//          "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        ),
//        Vector(
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes,
//          "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//        )
//      ),
//      "0000000000000000000000000000000000000000000000000000000000000000".unsafeStrictBytes
//    )
//
//    val (sk, vk) = kesProduct.createKeyPair(specIn_seed, specIn_height, 0)
//    val sig = kesProduct.sign(sk, specIn_msg)
//
//    vk shouldBe specOut_vk
//    sig shouldBe specOut_sig
//    kesProduct.verify(sig, specIn_msg, vk) shouldBe true
//  }

}
